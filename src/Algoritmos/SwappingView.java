/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Algoritmos;
import Procesos.Proceso;
import java.util.*;
import java.util.Scanner;
import javax.swing.*;
/**
 *
 * @author Agustin
 */
public class SwappingView extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    private ArrayList<Proceso> procesoLista; //atributo procesoLista de tipo ArrayList apra poder tratar el arreglo de procesos que recibiré
    
    public SwappingView(ArrayList<Proceso> p_procesoLista) { //Swapping view recibirá un ArrayList para tratar en clase Swapping
        initComponents();
        this.setProcLista(p_procesoLista); //seteo la lista de procesos
        
    }
    private void setProcLista(ArrayList pArray){ //seter del atributo procesoLista
        this.procesoLista = pArray;
    }
    public ArrayList<Proceso> getProcLista(){ //geter del atributo procesoLista
        return this.procesoLista; 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        T1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        T2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        T1S = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        T2S = new javax.swing.JTextArea();
        BotonSimular = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        Tx = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLabel1.setText("SWAPPING");

        T1.setColumns(20);
        T1.setRows(5);
        jScrollPane1.setViewportView(T1);

        T2.setColumns(20);
        T2.setRows(5);
        jScrollPane2.setViewportView(T2);

        T1S.setColumns(20);
        T1S.setRows(5);
        jScrollPane3.setViewportView(T1S);

        T2S.setColumns(20);
        T2S.setRows(5);
        jScrollPane4.setViewportView(T2S);

        BotonSimular.setText("Simular");
        BotonSimular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonSimularActionPerformed(evt);
            }
        });

        jLabel2.setText("Memoria Real");

        jLabel3.setText("Memoria Virtual");

        jLabel4.setText("Memoria Real Con Swapping");

        jLabel5.setText("Memoria Virtual Con Swapping");

        Tx.setColumns(20);
        Tx.setRows(5);
        jScrollPane5.setViewportView(Tx);

        jLabel6.setText("Memoria sin Swapping");

        jLabel7.setText("Memoria con Swapping");

        jLabel9.setText("Particiones donde se realizó Swap");

        jLabel10.setText("0");

        jLabel11.setText("1");

        jLabel12.setText("2");

        jLabel13.setText("3");

        jLabel14.setText("4");

        jLabel15.setText("0");

        jLabel16.setText("1");

        jLabel17.setText("2");

        jLabel18.setText("3");

        jLabel19.setText("4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel6))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(153, 153, 153))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 158, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel7)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(33, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(458, 458, 458)
                .addComponent(BotonSimular, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(BotonSimular)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane4)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel10)
                                .addGap(32, 32, 32)
                                .addComponent(jLabel11)
                                .addGap(33, 33, 33)
                                .addComponent(jLabel12)
                                .addGap(36, 36, 36)
                                .addComponent(jLabel13)
                                .addGap(41, 41, 41)
                                .addComponent(jLabel14)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))
                        .addGap(43, 43, 43)
                        .addComponent(jLabel9)
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel15)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel16)
                        .addGap(37, 37, 37)
                        .addComponent(jLabel17)
                        .addGap(37, 37, 37)
                        .addComponent(jLabel18)
                        .addGap(37, 37, 37)
                        .addComponent(jLabel19)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotonSimularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonSimularActionPerformed
          /* int cantidad1, cantidad2 =0; // defino cantidad1 y cantidad2 que me ayudarán para utilizar el array
           Proceso [] memReal = new Proceso[5]; //defino mi array memReal que contendrá procesos y el tamaño será de 5
           Proceso [] memVirtual = new Proceso[10]; //defino mi array memVitual que contendrá también procesos y con un tamaño de 10, pero que utilizará cantidad2 para almacenar x cantidad de procesos donde x < 11
           Proceso proces; //creo un abjeto Proceso llamado proces 
           int i; // declaro mi variable i para utilizar en los for
          // Scanner tecla = new Scanner(System.in); // cre un objeto tecla de tipo Scanner
         //  System.out.println("Memoria Principal con particiones de tamaño fijo de 20mb para los procesos. Tamaño total de 100mb ");
         //  System.out.println("Cantidad de Procesos: ");
           cantidad1 = Integer.parseInt(aDt.getText()); //almaceno lo que lee del teclado en cantidad1
           if(cantidad1 > 5){ // evaluo si mi cantidad1 es mayor a 5, donde 5 es el tamaño del array memReal[]
               cantidad2 = cantidad1 - 5; // dado el si del if, cantidad dos será cantidad1 - 5 y ahi tendré el tamaño de memVirtual[]
           }
           
           
           for(i=0; i<cantidad1 ; i++){ // utilizo un for para recorrer mi array memReal[]
                             
               int nombre = Integer.parseInt(JOptionPane.showInputDialog(" nNúmero del Proceso")); // obtengo el nombre del proceso
               int bloq = Integer.parseInt(JOptionPane.showInputDialog("Proceso Bloqueado? 1-Si Diferente-No"));
                // obtengo si mi usuario decide que el proceso esté bloqueado
               if (bloq == 1){ // caso afirmativo ... 
                   boolean block= true; // ...mi boolean en proceso será true y almaceno en block
                   proces = new Proceso(nombre, block); // instancio mi objeto proces con nombre y block
                   memReal[i] = proces; // guardo el objeto instanciado en memReal[] en la posición i
               }else{ // caso negativo ...
                   boolean block= false; // ...mi boolean en proceso será false y almaceno en block
                   proces = new Proceso(nombre, block); // instancio mi objeto proces con nombre y block
                   memReal[i] = proces; // guardo el objeto instanciado en memReal[] en la posición i
               }
           }
           for(i=0; i< cantidad2 ; i++){ // recorro  mi memVirual[]
               int nombre = Integer.parseInt(JOptionPane.showInputDialog("Memoria Virtual\nNúmero del Proceso"));            
               
               
               boolean block= false;
               proces = new Proceso(nombre, block); //al ihual que en memReal[] realizo lo mismo en memVirtual con la exepcion de que tomo como procesos listos los de memVirtual[]
               memVirtual[i] = proces;
           }
           
           
           for(i=0;i<5; i++){
               
               proces = memReal[i];
               if(proces.getBloqueado() == true){
                   T1.append("Partición " + i + ":" +"\nProceso N°: "+ proces.getNom() + "  Estado: bloqueado");
               }else{
                   T1.append("Partición " + i + ":" +"\nProceso N°: "+ proces.getNom() + "  Estado: listo");
               }
               T1.append("\n" + "-------------------------------------------------------" +"\n");
               
               
           }
           
           for(i=0;i<cantidad2; i++){
               
               proces = memVirtual[i];
               if(proces.getBloqueado() == true){
                   T2.append("Partición " + i + ":" +"\nProceso N°: "+ proces.getNom() + "  Estado: bloqueado");
               }else{
                   T2.append("Partición " + i + ":" +"\nProceso N°: "+ proces.getNom() + "  Estado: listo");
               }
               
               T2.append("\n" + "-------------------------------------------------------" +"\n");
              
           }
           
           int auxi=0,j=0;
           Proceso proAux;
           for(i=0;i<5; i++){ // el swpping consiste en recorrer mi cola de procesos e intercambiar procesos que este bloqueados con los procesos que se encuentran en memoria virtual
               proces = memReal[i];
               
               if(proces.getBloqueado() == true && auxi < cantidad2){ //solo intercambiará mientras halla procesos en estado listo en memoria virtual, eso lo controlamos con un auxi mientras sea menor a la cantidad2
                   Tx.append("Swap en Partición " + i +".\n"); // informo donde se realizó el intercambio
                   auxi = auxi + 1;
                   proAux = memReal[i]; // guardo mi proceso bloqueado en proAux                  
                   memReal[i] = memVirtual[j]; // muevo mi proceso listo al lugar donde se encontraba el proceso bloqueado
                   memVirtual[j] = proAux; // mi proceso bloqueado lo mando a la posicion del proceso listo en memoria virtual
                   j++;
               }
               
            }
           // de nuevo, muestro mis procesos en memoria real y se mostrará el cambio
           for(i=0;i<5; i++){
               proces = memReal[i];
               if(proces.getBloqueado() == true){
                   T1S.append("Partición " + i + ":" +"\nProceso N°: "+ proces.getNom() + "  Estado: bloqueado");
               }else{
                   T1S.append("Partición " + i + ":" +"\nProceso N°: "+ proces.getNom() + "  Estado: listo");
               }
               T1S.append("\n" + "-------------------------------------------------------" +"\n");
           }
           System.out.println("Memoria Secundaria Swapeada: "); // de nuevo, muestro mi memoria virtual con los nuevos procesos 
           for(i=0;i<cantidad2; i++){
               proces = memVirtual[i];
               if(proces.getBloqueado() == true){
                   T2S.append("Partición " + i + ":" +"\nProceso N°: "+ proces.getNom() + "  Estado: bloqueado");
               }else{
                   T2S.append("Partición " + i + ":" +"\nProceso N°: "+ proces.getNom() + "  Estado: listo");
               }
               
               T2S.append("\n" + "-------------------------------------------------------" +"\n");
           }/*
        
        */
        
 
        Swapping swapping = new Swapping (this.getProcLista()); // creo un objeto de la clase Swapping y le paso un arreglo de procesos
        /*int cantidad2, i;
        int cantidad1 = Integer.parseInt(aDt.getText());
        if(cantidad1 > 5){ // evaluo si mi cantidad1 es mayor a 5, donde 5 es el tamaño del array memReal[]
               cantidad2 = cantidad1 - 5; // dado el si del if, cantidad dos será cantidad1 - 5 y ahi tendré el tamaño de memVirtual[]
        }
        Proceso proces;
        
        Swapping swapping;
        int nombre = Integer.parseInt(JOptionPane.showInputDialog("Número del Proceso")); // obtengo el nombre del proceso
        int bloq = Integer.parseInt(JOptionPane.showInputDialog("Proceso Bloqueado? 1-Si Diferente-No"));
        
        if (bloq == 1){ // caso afirmativo ... 
                   boolean block= true; // ...mi boolean en proceso será true y almaceno en block
                   proces = new Proceso(nombre, block); // instancio mi objeto proces con nombre y block
                   swapping = new Swapping (proces); // guardo el objeto instanciado en memReal[] en la posición i
               }else{ // caso negativo ...
                   boolean block= false; // ...mi boolean en proceso será false y almaceno en block
                   proces = new Proceso(nombre, block); // instancio mi objeto proces con nombre y block
                   swapping = new Swapping (proces); // guardo el objeto instanciado en memReal[] en la posición i
        }
        
        for (i =1 ; i < cantidad1; i++){
            if(i<5){
                nombre = Integer.parseInt(JOptionPane.showInputDialog("Número del Proceso")); // obtengo el nombre del proceso
                bloq = Integer.parseInt(JOptionPane.showInputDialog("Proceso Bloqueado? 1-Si Diferente-No"));

                if (bloq == 1){ // caso afirmativo ... 
                    boolean block= true; // ...mi boolean en proceso será true y almaceno en block
                    proces = new Proceso(nombre, block); // instancio mi objeto proces con nombre y block
                    swapping.agregarProceso(proces); // guardo el objeto instanciado en memReal[] en la posición i
                }else{ // caso negativo ...
                    boolean block= false; // ...mi boolean en proceso será false y almaceno en block
                    proces = new Proceso(nombre, block); // instancio mi objeto proces con nombre y block
                    swapping.agregarProceso(proces); // guardo el objeto instanciado en memReal[] en la posición i
                }   
            }else{
                nombre = Integer.parseInt(JOptionPane.showInputDialog("Número del Proceso")); 
                boolean bloque = false;
                proces = new Proceso(nombre, bloque); // instancio mi objeto proces con nombre y block
                swapping.agregarProceso(proces);
            }
        }*/
        
        
        /*
        Proceso p;
        swapping.mostrarProcSecond();
        Proceso [] array2 = swapping.mostrarProcSecond();
        swapping.mostrarProcPrinc();
        Proceso [] array1 = swapping.mostrarProcPrinc();
        for (i=0;i< swapping.getProcPrincipales().size();i++){
            p = array1[i];
            T1.append(p.mostrar());
        }
        for (i=0;i< swapping.getProcSecundarios().size();i++){
            p = array2[i];
            T2.append(p.mostrar());
        }
        /*int i;
        int nom;
        boolean block;
        Swapping swapping;
        Proceso proc;
        nom = 1;
        block = true;
        proc = new Proceso ( nom , block);
        swapping = new Swapping (proc);
        for (i=1; i<8; i++){
            
            if(i<3){
                nom = i+1;
                block = true;
                proc = new Proceso ( nom , block);
                swapping.agregarProceso(proc);
            
            
            }else{
                nom = i;
                block = false;
                proc = new Proceso (nom , block);
                swapping.agregarProceso(proc);
            }
            
        }*/
        T1.setText(""); // en el áre de texto T1 seteeo con espacio vacío para poder limpiar el área de texto
        T1.append(swapping.mostrarProcPrinc()); //agrego al área de texto T1 el retorno del método mostrarProcPrinc() de la clase Swapping
        T2.setText(""); // en el áre de texto T2 seteeo con espacio vacío para poder limpiar el área de texto
        T2.append(swapping.mostrarProcSecond()); //agrego al área de texto T2 el retorno del método mostrarProcSecond() de la clase Swapping
        
        
        
        swapping.swappear(); // llamo al método swappear para que se realice swapping con las listas de los procesos
        Tx.setText("");// en el áre de texto Tx seteeo con espacio vacío para poder limpiar el área de texto
        Tx.append(swapping.cambiosLugar());//agrego al área de texto Tx el retorno del método mostrarProcPrinc() de la clase Swapping
        T1S.setText("");// en el áre de texto T1S seteeo con espacio vacío para poder limpiar el área de texto 
        T1S.append(swapping.mostrarPrin()); //al área de texto T1S agrego el retorno del método mostrarPrin() de la clase Swapping
        T2S.setText("");// en el áre de texto T2S seteeo con espacio vacío para poder limpiar el área de texto
        T2S.append(swapping.mostrarSecu()); //al área de texto T2S agrego el retorno del método mostrarSecu() de la clase Swapping
        
          
        
          
    }//GEN-LAST:event_BotonSimularActionPerformed

    /**
     * @param args the command line arguments
     */
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonSimular;
    private javax.swing.JTextArea T1;
    private javax.swing.JTextArea T1S;
    private javax.swing.JTextArea T2;
    private javax.swing.JTextArea T2S;
    private javax.swing.JTextArea Tx;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    // End of variables declaration//GEN-END:variables
}
